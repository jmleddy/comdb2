#include <stddef.h>
#include "mem.h"

#undef __MY_STATIC_MA__
#undef __MY_STATIC_MA_NAME__

#define __MY_STATIC_MA__ __HIMIKE__
#define __MY_STATIC_MA_NAME__ __HIGHMIKE__

#ifndef USE_SYS_ALLOC
static inline void *comdb2_malloc___HIGHMIKE__(size_t n)
{
    return comdb2_malloc_static(__MY_STATIC_MA__, n);
}

static inline void *comdb2_malloc0___HIGHMIKE__(size_t n)
{
    return comdb2_malloc0_static(__MY_STATIC_MA__, n);
}

static inline void *comdb2_calloc___HIGHMIKE__(size_t n, size_t size)
{
    return comdb2_calloc_static(__HIMIKE__, n, size);
}

static inline void *comdb2_realloc___HIGHMIKE__(void *ptr, size_t n)
{
    return comdb2_realloc_static(__MY_STATIC_MA__, ptr, n);
}

static inline char *comdb2_strdup___HIGHMIKE__(const char *s)
{
    return comdb2_strdup_static(__MY_STATIC_MA__, s);
}

static inline char *comdb2_strndup___HIGHMIKE__(const char *s, size_t n)
{
    return comdb2_strndup_static(__MY_STATIC_MA__, s, n);
}

static inline int  comdb2_malloc_trim___HIGHMIKE__(size_t pad)
{
    return comdb2_malloc_trim_static(__MY_STATIC_MA__, pad);
}

static inline int  comdb2_attach___HIGHMIKE__(comdb2ma alloc)
{
    return comdb2ma_attach_static(__MY_STATIC_MA__, alloc);
}

/* just an alias */
#  define comdb2_free___HIGHMIKE__ comdb2_free

/*******************************************
**                                         *
** MAKE_FUNC_NAME macro                    *
**                                         *
*******************************************/
#  undef MAKE_FUNC_NAME_INT
#  undef MAKE_FUNC_NAME_EVAL
#  undef MAKE_FUNC_NAME

#  define MAKE_FUNC_NAME_INT(func, subsystem) comdb2 ## func ## subsystem
#  define MAKE_FUNC_NAME_EVAL(func, subsystem) MAKE_FUNC_NAME_INT(func, subsystem)
#  define MAKE_FUNC_NAME(func) MAKE_FUNC_NAME_EVAL(_##func##_, __MY_STATIC_MA_NAME__)
#endif /* !USE_SYS_ALLOC */

#include "mem_override.h"
